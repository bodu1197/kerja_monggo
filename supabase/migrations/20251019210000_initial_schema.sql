-- Clean Schema for JobMonggo, Generated by Gemini based on source code analysis.

-- Drop old types if they exist, to start fresh
DROP TYPE IF EXISTS public.application_status CASCADE;
DROP TYPE IF EXISTS public.education_level CASCADE;
DROP TYPE IF EXISTS public.employment_type CASCADE;
DROP TYPE IF EXISTS public.experience_level CASCADE;
DROP TYPE IF EXISTS public.job_status CASCADE;

-- Create ENUM types needed for the job board
CREATE TYPE public.employment_type AS ENUM (
    'full_time',
    'part_time',
    'contract',
    'internship',
    'freelance'
);

CREATE TYPE public.experience_level AS ENUM (
    'entry',
    'junior',
    'mid',
    'senior',
    'lead',
    'executive'
);

CREATE TYPE public.job_status AS ENUM (
    'draft',
    'active',
    'paused',
    'closed'
);

CREATE TYPE public.education_level AS ENUM (
    'sma',
    'd3',
    's1',
    's2',
    's3'
);

CREATE TYPE public.application_status AS ENUM (
    'pending',
    'reviewed',
    'shortlisted',
    'interviewed',
    'offered',
    'rejected'
);


-- Create Table: profiles
-- Stores public user information, linked to auth.users
CREATE TABLE public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    username text UNIQUE,
    full_name text,
    avatar_url text,
    role text DEFAULT 'user'::text,
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.profiles IS 'Stores public user information.';

-- Create Table: provinces
-- Stores Indonesian provinces for location filtering.
CREATE TABLE public.provinces (
    province_id integer PRIMARY KEY,
    province_name character varying(100) NOT NULL
);
COMMENT ON TABLE public.provinces IS 'Indonesian provinces.';

-- Create Table: regencies
-- Stores Indonesian regencies (cities/districts).
CREATE TABLE public.regencies (
    regency_id integer PRIMARY KEY,
    province_id integer NOT NULL REFERENCES public.provinces(province_id),
    regency_name character varying(100) NOT NULL,
    latitude numeric(10, 8),
    longitude numeric(11, 8)
);
COMMENT ON TABLE public.regencies IS 'Indonesian regencies (cities/districts).';

-- Create Table: categories
-- Stores job categories with a parent-child relationship.
CREATE TABLE public.categories (
    category_id integer PRIMARY KEY,
    name character varying(100) NOT NULL,
    parent_category character varying(100),
    icon character varying(50)
);
COMMENT ON TABLE public.categories IS 'Job categories (2-level hierarchy).';

-- Create Table: companies
-- Stores company information posted by employers.
CREATE TABLE public.companies (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    company_name character varying(200) NOT NULL,
    contact_person text,
    phone text,
    email text,
    business_registration character varying(50),
    company_size character varying(50),
    industry character varying(100),
    website character varying(255),
    address text,
    province_id integer REFERENCES public.provinces(province_id),
    regency_id integer REFERENCES public.regencies(regency_id),
    logo_url text,
    description text,
    benefits text[],
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.companies IS 'Company profiles created by employers.';

-- Create Table: job_posts
-- Stores job advertisements posted by companies.
CREATE TABLE public.job_posts (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    company_id uuid NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    title character varying(200) NOT NULL,
    description text NOT NULL,
    requirements text NOT NULL,
    responsibilities text,
    province_id integer REFERENCES public.provinces(province_id),
    regency_id integer REFERENCES public.regencies(regency_id),
    category_id integer REFERENCES public.categories(category_id),
    subcategory_id integer REFERENCES public.categories(category_id),
    employment_type public.employment_type NOT NULL,
    experience_level public.experience_level NOT NULL,
    salary_min integer,
    salary_max integer,
    is_salary_negotiable boolean DEFAULT false,
    is_remote boolean DEFAULT false,
    skills text[],
    benefits text[],
    positions_available integer DEFAULT 1,
    deadline timestamptz,
    status public.job_status DEFAULT 'active'::public.job_status,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.job_posts IS 'Job advertisements posted by companies.';

-- Create Table: job_seeker_posts
-- Stores profiles of users seeking jobs.
CREATE TABLE public.job_seeker_posts (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    title character varying(200) NOT NULL,
    description text,
    province_id integer REFERENCES public.provinces(province_id),
    regency_id integer REFERENCES public.regencies(regency_id),
    category_id integer REFERENCES public.categories(category_id),
    subcategory_id integer REFERENCES public.categories(category_id),
    experience_level public.experience_level,
    skills text[],
    status public.job_status DEFAULT 'active'::public.job_status,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.job_seeker_posts IS 'Profiles of candidates looking for jobs.';

-- Create Table: candidate_profiles
-- Detailed profiles for job seekers, linked to their user account.
CREATE TABLE public.candidate_profiles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
    full_name character varying(100) NOT NULL,
    date_of_birth date,
    gender character varying(20),
    email character varying(255),
    phone character varying(15),
    province_id integer REFERENCES public.provinces(province_id),
    regency_id integer REFERENCES public.regencies(regency_id),
    current_title character varying(100),
    experience_level public.experience_level,
    expected_salary_min integer,
    expected_salary_max integer,
    skills text[],
    education_level public.education_level,
    resume_url text,
    portfolio_url text,
    linkedin_url text,
    bio text,
    is_profile_public boolean DEFAULT true,
    is_open_to_work boolean DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.candidate_profiles IS 'Detailed profiles for job seekers.';

-- Create Table: education
-- Stores education history for a candidate.
CREATE TABLE public.education (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    candidate_id uuid NOT NULL REFERENCES public.candidate_profiles(id) ON DELETE CASCADE,
    institution character varying(200) NOT NULL,
    degree public.education_level NOT NULL,
    field_of_study character varying(100),
    start_date date,
    end_date date,
    is_current boolean DEFAULT false,
    description text,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.education IS 'Education history for a candidate.';

-- Create Table: work_experience
-- Stores work experience for a candidate.
CREATE TABLE public.work_experience (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    candidate_id uuid NOT NULL REFERENCES public.candidate_profiles(id) ON DELETE CASCADE,
    company_name character varying(200) NOT NULL,
    job_title character varying(100) NOT NULL,
    employment_type public.employment_type,
    location character varying(100),
    start_date date NOT NULL,
    end_date date,
    is_current boolean DEFAULT false,
    description text,
    achievements text[],
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.work_experience IS 'Work experience for a candidate.';

-- Create Table: certifications
-- Stores certifications for a candidate.
CREATE TABLE public.certifications (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    candidate_id uuid NOT NULL REFERENCES public.candidate_profiles(id) ON DELETE CASCADE,
    name character varying(200) NOT NULL,
    issuing_organization character varying(200),
    issue_date date,
    expiry_date date,
    credential_id character varying(100),
    credential_url text,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.certifications IS 'Certifications for a candidate.';

-- Create Table: applications
-- Tracks job applications made by users.
CREATE TABLE public.applications (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id uuid NOT NULL REFERENCES public.job_posts(id) ON DELETE CASCADE,
    candidate_id uuid NOT NULL REFERENCES public.candidate_profiles(id) ON DELETE CASCADE,
    status public.application_status DEFAULT 'pending'::public.application_status,
    applied_at timestamptz DEFAULT now(),
    UNIQUE (job_id, candidate_id)
);
COMMENT ON TABLE public.applications IS 'Tracks job applications.';

-- Create Table: saved_jobs
-- Stores jobs that users have saved.
CREATE TABLE public.saved_jobs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    job_id uuid NOT NULL REFERENCES public.job_posts(id) ON DELETE CASCADE,
    created_at timestamptz DEFAULT now(),
    UNIQUE (user_id, job_id)
);
COMMENT ON TABLE public.saved_jobs IS 'Jobs saved by users.';

-- RLS Policies for profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- RLS Policies for all other tables (Enable SELECT for all, and INSERT/UPDATE/DELETE for owners)
ALTER TABLE public.companies ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Companies are viewable by everyone." ON public.companies FOR SELECT USING (true);
CREATE POLICY "Users can manage their own company." ON public.companies FOR ALL USING (auth.uid() = user_id);

ALTER TABLE public.job_posts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Job posts are viewable by everyone." ON public.job_posts FOR SELECT USING (status = 'active'::public.job_status);
CREATE POLICY "Owners can view their own job posts." ON public.job_posts FOR SELECT USING (EXISTS (SELECT 1 FROM companies WHERE companies.id = job_posts.company_id AND companies.user_id = auth.uid()));
CREATE POLICY "Owners can manage their own job posts." ON public.job_posts FOR ALL USING (EXISTS (SELECT 1 FROM companies WHERE companies.id = job_posts.company_id AND companies.user_id = auth.uid()));

ALTER TABLE public.job_seeker_posts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Job seeker posts are viewable by everyone." ON public.job_seeker_posts FOR SELECT USING (status = 'active'::public.job_status);
CREATE POLICY "Users can manage their own job seeker post." ON public.job_seeker_posts FOR ALL USING (auth.uid() = user_id);

ALTER TABLE public.candidate_profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Candidate profiles are viewable by everyone." ON public.candidate_profiles FOR SELECT USING (is_profile_public = true);
CREATE POLICY "Users can manage their own candidate profile." ON public.candidate_profiles FOR ALL USING (auth.uid() = user_id);

ALTER TABLE public.education ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own education records." ON public.education FOR ALL USING (EXISTS (SELECT 1 FROM candidate_profiles WHERE candidate_profiles.id = education.candidate_id AND candidate_profiles.user_id = auth.uid()));
CREATE POLICY "Public can view education records of public profiles." ON public.education FOR SELECT USING (EXISTS (SELECT 1 FROM candidate_profiles WHERE candidate_profiles.id = education.candidate_id AND candidate_profiles.is_profile_public = true));

ALTER TABLE public.work_experience ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own work experience." ON public.work_experience FOR ALL USING (EXISTS (SELECT 1 FROM candidate_profiles WHERE candidate_profiles.id = work_experience.candidate_id AND candidate_profiles.user_id = auth.uid()));
CREATE POLICY "Public can view work experience of public profiles." ON public.work_experience FOR SELECT USING (EXISTS (SELECT 1 FROM candidate_profiles WHERE candidate_profiles.id = work_experience.candidate_id AND candidate_profiles.is_profile_public = true));

ALTER TABLE public.certifications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own certifications." ON public.certifications FOR ALL USING (EXISTS (SELECT 1 FROM candidate_profiles WHERE candidate_profiles.id = certifications.candidate_id AND candidate_profiles.user_id = auth.uid()));
CREATE POLICY "Public can view certifications of public profiles." ON public.certifications FOR SELECT USING (EXISTS (SELECT 1 FROM candidate_profiles WHERE candidate_profiles.id = certifications.candidate_id AND candidate_profiles.is_profile_public = true));

ALTER TABLE public.applications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own applications." ON public.applications FOR ALL USING (EXISTS (SELECT 1 FROM candidate_profiles WHERE candidate_profiles.id = applications.candidate_id AND candidate_profiles.user_id = auth.uid()));
CREATE POLICY "Employers can see applications to their jobs." ON public.applications FOR SELECT USING (EXISTS (SELECT 1 FROM job_posts JOIN companies ON job_posts.company_id = companies.id WHERE job_posts.id = applications.job_id AND companies.user_id = auth.uid()));

ALTER TABLE public.saved_jobs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own saved jobs." ON public.saved_jobs FOR ALL USING (auth.uid() = user_id);

-- Enable RLS for location tables but allow all reads
ALTER TABLE public.provinces ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Provinces are viewable by everyone." ON public.provinces FOR SELECT USING (true);

ALTER TABLE public.regencies ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Regencies are viewable by everyone." ON public.regencies FOR SELECT USING (true);

ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Categories are viewable by everyone." ON public.categories FOR SELECT USING (true);

-- Function to create a profile when a new user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url'
  );
  RETURN NEW;
END;
$$;

-- Trigger to call the function
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
